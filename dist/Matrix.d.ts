export default class Matrix {
    entries: Float64Array;
    m: number;
    n: number;
    private constructor();
    static create(m: number, n: number, entries?: number[] | Float64Array): Matrix;
    static row(...xs: number[]): Matrix;
    static col(...xs: number[]): Matrix;
    static zero(m: number, n: number): Matrix;
    static fromNumber(x: number): Matrix;
    item(): number;
    static lift(f: (...xs: number[]) => number): (...Xs: Matrix[]) => Matrix;
    static abs(X: Matrix): Matrix;
    abs(): Matrix;
    static areClose(X: Matrix, Y: Matrix, eps?: number): Matrix;
    isCloseTo(Y: Matrix): Matrix;
    map(f: (x: number) => number): Matrix;
    all(): boolean;
    static dot(X: Matrix, Y: Matrix): Matrix;
    static equals(X: Matrix, Y: Matrix): Matrix;
    equals(Y: Matrix): Matrix;
    static plus(...Xs: Matrix[]): Matrix;
    plus(...Xs: Matrix[]): Matrix;
    static neg(X: Matrix): Matrix;
    neg(): Matrix;
    static minus(X: Matrix, Y: Matrix): Matrix;
    minus(Y: Matrix): Matrix;
    static times(...Xs: Matrix[]): Matrix;
    times(...Xs: Matrix[]): Matrix;
    static divide(X: Matrix, Y: Matrix): Matrix;
    static pow(X: Matrix, Y: Matrix): Matrix;
    pow(Y: Matrix): Matrix;
    static transpose(X: Matrix): Matrix;
    transpose(): Matrix;
    static vJoin(X: Matrix, Y: Matrix): Matrix;
    vJoin(Y: Matrix): Matrix;
    static hJoin(X: Matrix, Y: Matrix): Matrix;
    hJoin(Y: Matrix): Matrix;
    isVector(): boolean;
    isNumber(): boolean;
    toString(): string;
    log(): void;
}
